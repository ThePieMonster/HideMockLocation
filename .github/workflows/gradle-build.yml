# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Gradle Build

on:
  pull_request:
    branches: [ main ]
    types: [opened, closed, reopened, synchronize, edited]

permissions: write-all

env:
  APP_NAME: HideMockLocation

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Input Check
      run: |
        echo "github.event_name : ${{ github.event_name }}"
        echo "github.event.action : ${{ github.event.action }}"
        echo "github.ref : ${{ github.ref }}"
        echo "github.event.pull_request.merged : ${{ github.event.pull_request.merged }}"
        echo "github.event.number : ${{ github.event.number }}"

    - name: Check Labels
      uses: yogevbd/enforce-label-action@2.2.2
      with:
        REQUIRED_LABELS_ANY: "bug,documentation,enhancement"
        REQUIRED_LABELS_ANY_DESCRIPTION: "Select at least one label ['bug','documentation','enhancement']"
        BANNED_LABELS: "banned"

    - name: Checkout Code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

#    - name: Set up JDK
#      uses: actions/setup-java@v2
#      with:
#        java-version: '11'
#        distribution: 'temurin'
    
    - name: Get Latest Release Tag
      working-directory : ${{ github.workspace }}/app
      run : |
        echo "Get Latest Release Tag"
        LATESTRELEASETAG=$(curl -s https://api.github.com/repos/thepiemonster/hidemocklocation/releases/latest | grep "tag_name" | grep -oP '"tag_name": "\K[^"]+')
        echo "$LATESTRELEASETAG"
        echo "LATESTRELEASETAG=$LATESTRELEASETAG" >> $GITHUB_ENV
    
    - name: Create Latest Release TXT File
      working-directory : ${{ github.workspace }}/app
      run : |
        echo "Create Latest Release TXT File"
        echo "${{ env.LATESTRELEASETAG }}" > LatestReleaseTag.txt
    
    - name: Get Gradle VersionName
      working-directory : ${{ github.workspace }}/app
      run : |
        echo "Get Gradle VersionName"
        VERSIONNAME=$(grep 'versionName' build.gradle | awk '{print $2}' | tr -d '"')
        echo "$VERSIONNAME"
        echo "VERSIONNAME=$VERSIONNAME" >> $GITHUB_ENV
  
    - name: Create Gradle VersionName TXT File
      working-directory : ${{ github.workspace }}/app
      run : |
        echo "Create Gradle VersionName TXT File"
        echo "${{ env.VERSIONNAME }}" > VersionName.txt

    - name: Check If Gradle Version Equals Latest Release Tag
      working-directory : ${{ github.workspace }}/app
      run : |
        VERSIONNAME=${{ env.VERSIONNAME }}
        LATESTRELEASETAG=${{ env.LATESTRELEASETAG }}
        echo "Gradle Version Name: $VERSIONNAME"
        echo "Latest Release Tag: $LATESTRELEASETAG"
        if [ "$VERSIONNAME" = "$LATESTRELEASETAG" ]; then echo "Current Gradle Version is the same as GitHubs latest Release tag. This will create a tagging conflict when PR is merged due to every PR creating a release. This can be resolved by updating the build.gradle file."; exit 1; else echo "All clear!"; fi
           
    - name: Decode Keystore
      id: decode_keystore
      uses: timheuer/base64-to-file@v1
      with:
        fileName: 'keystore/HideMockLocation.jks'
        encodedString: ${{ secrets.SIGNING_STORE_PASSWORD }}

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        cache-disabled: true
    
    - name: Make Gradlew Executable
      run: chmod +x ./gradlew
    
    - name: Execute Gradle build
      run: ./gradlew build
      env:
        SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
        SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
        SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
        
#    - name: Build with Gradle
#      uses: gradle/gradle-build-action@937999e9cc2425eddc7fd62d1053baf041147db7
#      with:
#        arguments: build
#        cache-disabled: true

    - name : View Build Directory
      working-directory : ${{ github.workspace }}
      run : |
        echo "${{ github.workspace }}/app/build/outputs/apk/debug"
        ls -la ${{ github.workspace }}/app/build/outputs/apk/debug
        echo ""
        echo "${{ github.workspace }}/app/build/outputs/apk/release"
        ls -la ${{ github.workspace }}/app/build/outputs/apk/release

    - name: Rename APK
      working-directory : ${{ github.workspace }}/app/build/outputs/apk/release
      run: mv *.apk ${{ env.APP_NAME }}-${{ env.VERSIONNAME }}.apk

    - name: Upload Artifact APK
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.APP_NAME }}-${{ env.VERSIONNAME }}.apk
        path: ${{ github.workspace }}/app/build/outputs/apk/release/${{ env.APP_NAME }}-${{ env.VERSIONNAME }}.apk

    - name: Upload Artifact VersionName
      uses: actions/upload-artifact@v2
      with:
        name: VersionName.txt
        path: ${{ github.workspace }}/app/VersionName.txt



  merge_completed:
    needs: build
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    - name: Display PR Number
      run: |
        echo "PR #${{ github.event.number }} has been merged"
    
    - name: Download Artifact VersionName
      uses: actions/download-artifact@v3.0.0
      with:
        name: VersionName.txt
        path: ${{ github.workspace }}/artifact

    - name: Read Gradle VersionName
      working-directory : ${{ github.workspace }}/artifact
      run : |
        echo "Read Gradle VersionName"
        echo "VERSIONNAME=$(cat VersionName.txt)" >> $GITHUB_ENV
        echo "$VERSIONNAME"

    - name: Download Artifact APK
      uses: actions/download-artifact@v3.0.0
      with:
        name: ${{ env.APP_NAME }}-${{ env.VERSIONNAME }}.apk
        path: ${{ github.workspace }}/artifact
      
    - name : View Artifact Directory
      working-directory : ${{ github.workspace }}/artifact
      run : | 
        echo "${{ github.workspace }}/artifact"
        ls -la

    - name: Check If Current VersionName Exists As Tag 
      uses: mukunku/tag-exists-action@v1.0.0
      id: checkTag
      with: 
        tag: ${{ env.VERSIONNAME }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Output Tag Check 
      run: |
        echo "Tag Check: ${{ steps.checkTag.outputs.exists }}"
        echo "TAGCHECK=${{ steps.checkTag.outputs.exists }}" >> $GITHUB_ENV 
        
    - name: Tag Exists
      if: env.TAGCHECK == format('true')
      run: |
        echo "Current VersionName Exists As Tag"
        exit 1
        
    - name: Create Tag
      if: env.TAGCHECK == format('false')
      uses: actions/github-script@v5
      with:
        script: |
          github.rest.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: 'refs/tags/${{ env.VERSIONNAME }}',
            sha: context.sha
          })
      
    - name: Get Changelog
      uses: mikepenz/release-changelog-builder-action@v2
      id: Changelog
      with:
          configuration: ".github/configs/configuration.json"
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Output Changelog
      run : |
        echo "Output Changelog"
        echo "${{ steps.Changelog.outputs.changelog }}"
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSIONNAME }}
        release_name: ${{ env.VERSIONNAME }}
        body: ${{ steps.Changelog.outputs.changelog }}
        draft: false
        prerelease: false
 
    - name: Upload Release Artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ github.workspace }}/artifact/${{ env.APP_NAME }}-${{ env.VERSIONNAME }}.apk
        asset_name: ${{ env.APP_NAME }}-${{ env.VERSIONNAME }}.apk
        asset_content_type: application/gzip

    - name: Create Release - Xposed Repo
      id: create_release_xposed
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.VERSIONNAME }}
        tag: ${{ env.VERSIONNAME }}
        body: ${{ env.CHANGELOG }}
        artifacts: ${{ github.workspace }}/artifact/${{ env.APP_NAME }}-${{ env.VERSIONNAME }}.apk
        token: ${{ secrets.REPO_TOKEN }}
        owner: Xposed-Modules-Repo
        repo: com.github.thepiemonster.hidemocklocation



  merge_incomplete:
    needs: build
    if: github.event.pull_request.merged == false
    runs-on: ubuntu-latest
    
    steps:
    - name: PR Closed Without Merge
      run: |
        echo "PR #${{ github.event.number }} has been edited or closed without being merged"
